	#Build stage

#1. Get SDK image from Public Repository as a "build"
FROM mcr.microsoft.com/dotnet/sdk:6.0 AS build

#2. Set working directory to /app
WORKDIR /app

#3. Copy the .sln and .csproj files to the corresponding directories
COPY ["DockerSqlUniversity.sln", "."]
COPY ["DatabaseLibrary/DatabaseLibrary.csproj", "./DatabaseLibrary/"]
COPY ["SakilaWebApi/SakilaWebApi.csproj", "./SakilaWebApi/"]

#4. Restore dependencies present in the project files

WORKDIR /app/DatabaseLibrary
RUN dotnet restore

WORKDIR /app/SakilaWebApi
RUN dotnet restore

WORKDIR /app

#5. Copy all project files to the respective directory
COPY ["DatabaseLibrary/.", "./DatabaseLibrary/"]
COPY ["SakilaWebApi/.", "./SakilaWebApi/"]

WORKDIR /app/SakilaWebApi

#6. Build SakilaWebApi project in the Release mode and set the build output to the /app/build directory
RUN dotnet build "SakilaWebApi.csproj" -c Release -o /app/build

	#Publish stage

#1. From build image crated in the previous set, create a new image named "publish"
FROM build AS publish

#2. Publish the application (with no restore, becasue restore was done previously) and set the output directory to /app/publish
RUN dotnet publish "SakilaWebApi.csproj" -c Release -o /app/publish --no-restore
#We could use the other flags:
#dotnet publish "SakilaWebApi.csproj" -c Release -o /app/publish --no-restore -p:PublishTrimmed=true
#dotnet publish "SakilaWebApi.csproj" -c Release -o /app/publish --no-restore -p:PublishReadyToRun=true
#PublishReadyToRun is for big application, PublishTrimmed what we what to make app as fit as possible (but can cause run time issues)

	#Final stage

#1. Use aspnet image to create an final image (we would not use the sdk here, just what is enough to run the app)
FROM mcr.microsoft.com/dotnet/aspnet:6.0 AS final

#2. Set the name of the image owner (metadata)
LABEL Name="Eltin"

#3. Set working directory
WORKDIR /app/SakilaWebApi
 
#Ports are exposed in a docker-compose.yaml file

#5. Copy from "publish" image the whole directory "/app/publish" to the current directory (which is "/app/SakilaWebApi")
COPY --from=publish /app/publish .

#6. Set the entrypoint of the container to the ASP.NETCoreWebAPI.dll
ENTRYPOINT ["dotnet", "SakilaWebApi.dll"]